<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 行者小筑</title>
    <link>razil.cc/categories/golang/</link>
    <description>Recent content in Golang on 行者小筑</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Dec 2017 15:35:04 +0800</lastBuildDate>
    <atom:link href="razil.cc/categories/golang/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>使用Beego处理多文件上传</title>
      <link>razil.cc/post/2017/12/beego-multi-file-upload/</link>
      <pubDate>Wed, 27 Dec 2017 15:35:04 +0800</pubDate>
      
      <guid>razil.cc/post/2017/12/beego-multi-file-upload/</guid>
      <description>实现方法 Beego 在controller处理上提供了GetFile和GetFiles方法，以获取MultipartForm里的文件内容。详细说明查看godoc。
获取单个文件 func (*Controller) GetFile
 func (c *Controller) GetFile(key string) (multipart.File, *multipart.FileHeader, error) GetFile returns the file data in file upload field named as key. it returns the first one of multi-uploaded files.
 获取多个文件 func (*Controller) GetFiles
 func (c *Controller) GetFiles(key string) ([]*multipart.FileHeader, error)
 本文结合示例代码和工程应用提供实际可用解决方法。 前端页面上传的请求格式按照rfc1867标准即可。 Body内容如下图所示
服务端代码 import( &amp;quot;io&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;github.com/astaxie/beego&amp;quot; &amp;quot;github.com/astaxie/beego/logs&amp;quot; ) //默认参数 const ( STATIC_PATH = &amp;quot;tmp/&amp;quot; ) //	文件信息格式 type FileRecord struct { FileName string `json:&amp;quot;file_name&amp;quot;` Path string `json:&amp;quot;path&amp;quot;` FileSize string `json:&amp;quot;file_size&amp;quot;` UploadTime string `json:&amp;quot;upload_time&amp;quot;` } //	上传 type UploadController struct { beego.</description>
    </item>
    
    <item>
      <title>使用Go语言处理动态JSON类型</title>
      <link>razil.cc/post/2017/12/dynamic-json/</link>
      <pubDate>Thu, 14 Dec 2017 00:22:45 +0800</pubDate>
      
      <guid>razil.cc/post/2017/12/dynamic-json/</guid>
      <description>背景 在项目中有遇到JSON格式的数据流，对接的数据源其内容格式会有变化，但是内部会有字段表示其内容的类型，比如以下结构:
type DataJson struct { JsonType string `json:&amp;quot;json_type&amp;quot;` Data interface{} `json:&amp;quot;data&amp;quot;` }  其中DataJson是固定每次数据流返回的JSON数据格式，但是其中的Data有以下几种可能：字符串、Int64数值、结构体对象。
这种情况需要根据Json去进行判断。
生成动态类型 在Go语言中通过使用interface{}类型，我们可以很方便地把各种数据类型都使用同一个数据对象中进行数据传递。 动态类型生成方式很简单:
type DataJson struct { JsonType string `json:&amp;quot;json_type&amp;quot;` Data interface{} `json:&amp;quot;data&amp;quot;` } func main(){ //定义两个JSON数据对象 var jsData1,jsData2 DataJson //String数据类型对象 jsData1.JsonType = &amp;quot;string&amp;quot; jsData1.Data = &amp;quot;hello json&amp;quot; //Int64数据类型对象 jsData2.JsonType = &amp;quot;int64&amp;quot; jsData2.Data = 123456789	}  解析动态类型 方法一 整体二次反序列化 核心原理是通过新建一个对象，将能已知的数据对象先解析并获取到目标数据类型后再进行二次解析。
//目标类型 type DataJson struct { JsonType string `json:&amp;quot;json_type&amp;quot;` Data interface{} `json:&amp;quot;data&amp;quot;`	} //中间类型 type DataJsonType struct { JsonType string `json:&amp;quot;json_type&amp;quot;` } //字符串类型 type DataJsonTypeString struct { Data string `json:&amp;quot;data&amp;quot;` } func main(){ //原始JSON数据 var rawData = ` { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;data&amp;quot;: &amp;quot;dynamite&amp;quot; } ` buffer := []byte(rawData) //创建中间类型对象 var md DataJsonType err := json.</description>
    </item>
    
    <item>
      <title>[译]Context并非为cancel而生</title>
      <link>razil.cc/post/2017/11/go-context-is-not-for-cancel/</link>
      <pubDate>Thu, 30 Nov 2017 20:47:48 +0800</pubDate>
      
      <guid>razil.cc/post/2017/11/go-context-is-not-for-cancel/</guid>
      <description>前言 译者:Razil
本文译自:Context isn’t for cancellation</description>
    </item>
    
    <item>
      <title>Go爬虫初探</title>
      <link>razil.cc/post/2017/10/meet-go-scrapy/</link>
      <pubDate>Tue, 26 Sep 2017 23:29:00 +0800</pubDate>
      
      <guid>razil.cc/post/2017/10/meet-go-scrapy/</guid>
      <description>背景 前些天用Python实践了一下爬虫功能，强大的requests库、re库、beautifulsoup库和scrapy框架以及其附属的分布式数据库配套库，开发起来十分高效。对于复杂的爬虫规则和验证规则，Python的相关生态也能提供很好的解决方案。回到golang，也想尝试是否能用go语言也构建一个基本爬虫，看实现上会有多大差异。
目标功能 获取 http://razil.cc 首页上的网站名称元素内容。
目标内容为“后端小筑”
基本结构 由于是基本的定向爬虫，类比Python的结构是
requests库 + re库
即基本请求后处理转码，再通过正则获得需要的数据
在go实现的结构如下:
 [net/http] 基本请求
 [mahonia] 第三方库实现编码转换
 [regexp] 正则匹配数据
  代码实现 package main import ( &amp;quot;errors&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;regexp&amp;quot; encodingConvert &amp;quot;github.com/DennisMao/mahonia&amp;quot; ) func SimpleScrapy(url string) (string, error) { //http请求 resp, err := http.Get(url) if err != nil { return &amp;quot;&amp;quot;, err } //获取响应数据 if resp.StatusCode != 200 { return &amp;quot;&amp;quot;, errors.New(&amp;quot;resp statuscode = :&amp;quot; + fmt.</description>
    </item>
    
    <item>
      <title>Websocket使用手记</title>
      <link>razil.cc/post/2017/07/gowebsocket-experience/</link>
      <pubDate>Thu, 21 Sep 2017 23:51:49 +0800</pubDate>
      
      <guid>razil.cc/post/2017/07/gowebsocket-experience/</guid>
      <description>websocket是什么? Websocket最起初是在HTTP协议的基础上发展而来，后独立成为了一个标准。其特点是只要建立一次连接，即可保持服务端与客户端的长连接状态，期间可保持全双工的通讯(实时双方互传)。由于省去了重复建立连接产生的性能和带宽消耗，WebSocket可实现高性能的数据实时传递。
用于什么场景? 可应用在前后端数据需要实时数据互传的情况，比如：
 聊天系统 股票显示 实时交互游戏  为什么要选用它? 选用websocket的理由: + 相比起直接建立TCP连接，使用WebSocket可以更便捷，协议内已处理了粘包、压缩、心跳等问题。 + 协议的握手建立在http 1.1，因此在开发过程中可以很好的集成到现有的Restful风格中。 + 协议中的数据传递虽然是websocket的独立协议，但是其传输过程与http请求响应风格相近,开发难度低，学习成本低。 + 协议的本质还是建立一个socket连接。原生支持wss安全访问，底层支持数据压缩、自动检验和消息包自动拆分。 + 客户端应用简单，前端对于websocket的处理，代码简单，开发效率高。
使用过程 服务端 目前Go语言主流的Websocket库有两个：
 官方golang.org/x/websocket 库
 github.com/gorilla/websocket 库
  官方的库目前支持情况不太理想,godoc官方的websocket包页面介绍上推荐使用Gorilla的库。两者对比下，官方的包目前能够实现基本的服务器和客户端连接、收发功能。如果需要快捷开发基本WebSocket功能可使用官方包。需要协议的高级功能的推荐采用Gorilla包。
Gorilla/websocket包，丰富了支持Websocket协议内的数据压缩、心跳检测事件、碎片信息。
程序结构
websocket
 main()
 注册普通HTTP路由
 监听HTTP服务
 websocket_handler()
 Upgrade 升级普通HTTP协议为Websocket协议，建立连接
 For循环
 ReadMessage 读取信息
 WriteMessage 写入信息
     服务端的编写并不复杂，与普通HTTP服务编写相近，先编写一个Handler处理函数，再在主程序中注册路由，开启服务，不同的主要在处理函数中。由于普通HTTP的响应都是无状态，即请求后响应即可退出协程，但Websocket需要协程一直在跑，而且句柄固定，因此我们需要在Websocket的处理函数中加入循环，不让它关闭。
 客户端主动断开连接 服务端接收信息失败 服务端发送信息失败 心跳检查失败  客户端 javascript 参考websocket.</description>
    </item>
    
  </channel>
</rss>
